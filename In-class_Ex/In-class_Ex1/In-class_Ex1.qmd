---
title: "In-class Exercise 1: My First Date with Geospatial Data Analytics"
date: "18 November 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## Getting Started

The code chunk below load the following packages:

-   tmap: for thematic mapping
-   sf: for geospatial data handling
-   tidyverse for non-spatial data handling.

```{r}
pacman::p_load(tmap, sf, tidyverse)
```

## Preparing the Flow Data

### Importing the OD data

Firstly, we will import the *Passenger Volume by Origin Destination Bus Stops* data set downloaded from LTA DataMall by using `read_csv()` of **readr** package.

```{r}
#| eval: false
odbus <- read_csv("data/aspatial/origin_destination_bus_202308.csv")
```

A quick check of odbus tibble data frame shows that the values in OROGIN_PT_CODE and DESTINATON_PT_CODE are in numeric data type. Hence, the code chunk below is used to convert these data values into character data type.

```{r}
#| eval: false
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE) 
```

### Extracting the study data

For the purpose of this exercise, we will extract commuting flows on weekday and between 7 and 9 o'clock.

```{r}
#| eval: false
origtrip_7_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

```{r}
#| eval: false
desttrip_7_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 &
           TIME_PER_HOUR <= 9) %>%
  group_by(DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

```{r}
#| eval: false
odbus7_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

We will save the output in rds format for future used.

```{r}
#| eval: false
write_rds(odbus7_9, "data/rds/odbus7_9.rds")
```

The code chunk below will be used to import the save odbus7_9.rds into R environment.

```{r}
#| eval: false
odbus7_9 <- read_rds("data/rds/odbus7_9.rds")
```

## Working with Geospatial Data

For the purpose of this exercise, two geospatial data will be used. They are:

-   BusStop: This data provides the location of bus stop as at last quarter of 2022.
-   MPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.

Both data sets are in ESRI shapefile format.

### Importing geospatial data

Two geospatial data will be used in this exercise, they are:

```{r}
#| eval: false
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
mpsz
```

::: callout-note
-   `st_read()` function of sf package is used to import the shapefile into R as sf data frame.
-   `st_transform()` function of sf package is used to transform the projection to crs 3414.
:::

## Geospatial data wrangling

### Combining Busstop and mpsz

Code chunk below populates the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame.

```{r}
#| eval: false
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

::: callout-note
-   `st_intersection()` is used to perform point and polygon overly and the output will be in point sf object.
-   `select()` of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.
-   five bus stops are excluded in the resultant data frame because they are outside of Singapore bpundary.
:::

Before moving to the next step, it is wise to save the output into rds format.

```{r}
#| eval: false
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.csv")  
```

Next, we are going to append the planning subzone code from busstop_mpsz data frame onto odbus7_9 data frame.

```{r}
#| eval: false
orig_data <- left_join(origtrip_7_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C)
```

```{r}
#| eval: false
od_data <- left_join(odbus7_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

Before continue, it is a good practice for us to check for duplicating records.

```{r}
#| eval: false
duplicate <- orig_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

If duplicated records are found, the code chunk below will be used to retain the unique records.

```{r}
#| eval: false
od_data <- unique(od_data)
```

It will be a good practice to confirm if the duplicating records issue has been addressed fully.

Next, we will update od_data data frame with the planning subzone codes.

```{r}
mpsz_origtrip <- left_join(mpsz, orig_data,
                           by = c("SUBZONE_C" = "ORIGIN_SZ"))
```

```{r}
tm_shape(mpsz_origtrip)+
  tm_fill("TRIPS", 
          style = "quantile", 
          palette = "Blues",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))


```

```{r}
#| eval: false
od_data <- left_join(od_data , busstop_mpsz,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 
```

```{r}
#| eval: false
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

```{r}
#| eval: false
od_data <- unique(od_data)
```

```{r}
#| eval: false
od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na()
```

It is time to save the output into an rds file format.

```{r}
#| eval: false
write_rds(od_data, "data/rds/od_data.rds")
```

```{r}
#| eval: false
od_data <- read_rds("data/rds/od_data.rds")
```

## Visualising the Geospatial Data

```{r}
tmap_mode("plot")
tmap_options(check.and.fix = TRUE)
qtm(mpsz)
```

# Viewing the Subzone spatial file

```{r}
head(mpsz, 10)
```
