---
title: "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?"
author: Dr. Kam Tin Seong
execute:
  warning: false
  message: false
format: html
editor: visual
---

## Overview

In Chapter 4, you learned how to compute Global and Local Measures of Spatial Association by using functions provided by [spdep]() package.  In this chapter, you will gain hands-on experience on using functions provide by [sfdep](), an interface to integrate with sf objects and the tidyverse framework, to compute Global and Local Measures of Spatial Association.   

## Getting Started


Installing sfdep

```{r}
remotes::install_github("josiahparry/sfdep")
```

In the code chunk below, `p_load()` of *pacman* package is used to install and load the following R packages into R environment:

-   sf,
-   tidyverse,
-   tmap,
-   spdep, and
-   funModeling will be used for rapid Exploratory Data Analysis
-   rgeoda

Installing sfdep

```{r}
remotes::install_github("josiahparry/sfdep")
```

Note: You only need to run the code chunk above once.


```{r}
pacman::p_load(sf, tidyverse, tmap, funModeling, sfdep)
```


## Importing Geospatial Data

In this in-class data, two geospatial data sets will be used, they are:

-   geo_export

-   nga_admbnda_adm2_osgof_20190417

### Importing water point geospatial data

First, we are going to import the water point geospatial data (i.e. geo_export) by using the code chunk below.

```{r}
#| eval: false
wp <- st_read(dsn = "geodata",
              layer = "geo_export",
              crs = 4326) %>%
  filter(clean_coun == "Nigeria")
```

Things to learn from the code chunk above:

-   `st_read()` of **sf** package is used to import *geo_export* shapefile into R environment and save the imported geospatial data into simple feature data table.
-   `filter()` of dplyr package is used to extract water point records of Nigeria.

> Be warned: Avoid performing transformation if you plan to use `st_intersects()` of **sf** package in the later stage of the geoprocessing. This is because `st_intersects()` only works correctly if the geospatial data are in geographic coordinate system (i.e. wgs84)

Next, `write_rds()` of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format.  The output file is called *wp_nga.rds* and it is saved in *geodata* sub-folder.

```{r}
#| eval: false
write_rds(wp, "geodata/wp_nga.rds")
```

### Importing Nigeria LGA boundary data

Now, we are going to import the LGA boundary data into R environment by using the code chunk below.

```{r}
#| eval: false
nga <- st_read(dsn = "geodata",
               layer = "nga_admbnda_adm2_osgof_20190417",
               crs = 4326)
```

Thing to learn from the code chunk above.

-   `st_read()` of **sf** package is used to import *nga_admbnda_adm2_osgof_20190417* shapefile into R environment and save the imported geospatial data into simple feature data table.

## Data Wrangling

### Recoding NA values into string

In the code chunk below, `replace_na()` is used to recode all the *NA* values in *status_cle* field into *Unknown*.

```{r}
#| eval: false
wp_nga <- read_rds("geodata/wp_nga.rds") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))
```

### EDA

In the code chunk below, `freq()` of **funModeling** package is used to display the distribution of *status_cle* field in *wp_nga*.

```{r}
#| eval: false
freq(data=wp_nga, 
     input = 'status_cle')
```

## Extracting Water Point Data

In this section, we will extract the water point records by using classes in *status_cle* field.

### Extracting funtional water point

In the code chunk below, `filter()` of dplyr is used to select functional water points.

```{r}
#| eval: false
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
#| eval: false
freq(data=wpt_functional, 
     input = 'status_cle')
```

### Extracting non-funtional water point

In the code chunk below, `filter()` of dplyr is used to select non-functional water points.

```{r}
#| eval: false
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

```{r}
#| eval: false
freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

### Extracting water point with Unknown class

In the code chunk below, `filter()` of dplyr is used to select water points with unknown status.

```{r}
#| eval: false
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

## Performing Point-in-Polygon Count

```{r}
#| eval: false
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

## Saving the Analytical Data Table

```{r}
#| eval: false
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%
  select(3:4, 9:10, 18:23)
```

Things to learn from the code chunk above:

-   `mutate()` of **dplyr** package is used to derive two fields namely *pct_functional* and *pct_non-functional*.
-   to keep the file size small, `select()` of **dplyr** is used to retain only field 3,4,9,10, 18,19,20,21,22,and 23.

Now, you have the tidy sf data table subsequent analysis.  We will save the sf data table into rds format. 

```{r}
#| eval: false
write_rds(nga_wp, "geodata/nga_wp.rds")
```

Before you end this section, please remember to delete away all the raw data.  Notice that the only data file left is *nga_wp.rds* and it's file size is aroung 2.1MB.

```{r}
nga_wp <- read_rds("geodata/nga_wp.rds")
```


## Visualising the spatial dsitribution of water points

```{r}
#| fig-width: 14
#| fig-height: 12
total <- qtm(nga_wp, "total wpt")
wp_functional <- qtm(nga_wp, "wpt functional")
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")
unknown <- qtm(nga_wp, "wpt unknown")

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)
```


First, we will exclude LGA without water point from the analysis

```{r}
nga_wp <- nga_wp %>%
  filter(`total wpt` > 0)
```

Next, 

```{r}
knn16_w <- st_knn(nga_wp$geometry, k = 16)
summary(knn16_w)
```


```{r}
nga_nb <- nga_wp %>% 
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb),
         .before = 1)
```  

```{r}
nga_lisa <- nga_nb %>% 
  mutate(local_moran = local_moran(
    `pct_non-functional`, nb, wt, nsim = 99),
    .before = 1)
```


```{r}
nga_lisa_sig <- nga_lisa %>%
  filter(local_moran$p_ii <= 0.05)
```


