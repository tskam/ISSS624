[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I learn how to import and wrangling geospatial data using appropriate R packages."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below install and load sf and tidyverse packages into R environment.\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\nImporting polygon feature data\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\tskam\\ISSS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "In this webpage, I am going to share with you my learning journey of geospatial analytics."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_ex1.html",
    "href": "In-class_Ex/In-class_Ex1/In-class_ex1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This xxx"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_ex1.html#getting-started",
    "href": "In-class_Ex/In-class_Ex1/In-class_ex1.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nThe code chunk below will install and load tidyverse and sf packages.\n\npacman::p_load(sf, tidyverse, spdep)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_ex1.html#importing-geospatial-data",
    "href": "In-class_Ex/In-class_Ex1/In-class_ex1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1",
    "section": "3 Importing Geospatial Data",
    "text": "3 Importing Geospatial Data\n\n3.1 Importing polygon features\nThis code chunk will import ESRI shapefile into R.\n\nhunan_sf <- st_read(dsn = \"data/geospatial\",\n                layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\tskam\\ISSS624\\In-class_Ex\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n3.2 Importing attribute data in csv\n\nhunan <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I learn how to import and wrangling geospatial data using appropriate R packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below install and load sf and tidyverse packages into R environment.\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\nImporting polygon feature data\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\tskam\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "",
    "text": "In Chapter 4, you learned how to compute Global and Local Measures of Spatial Association by using functions provided by spdep package. In this chapter, you will gain hands-on experience on using functions provide by sfdep, an interface to integrate with sf objects and the tidyverse framework, to compute Global and Local Measures of Spatial Association."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#getting-started",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#getting-started",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Getting Started",
    "text": "Getting Started\nInstalling sfdep\n\nremotes::install_github(\"josiahparry/sfdep\")\n\nIn the code chunk below, p_load() of pacman package is used to install and load the following R packages into R environment:\n\nsf,\ntidyverse,\ntmap,\nspdep, and\nfunModeling will be used for rapid Exploratory Data Analysis\nrgeoda\n\nInstalling sfdep\n\nremotes::install_github(\"josiahparry/sfdep\")\n\nNote: You only need to run the code chunk above once.\n\npacman::p_load(sf, tidyverse, tmap, funModeling, sfdep)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-geospatial-data",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-geospatial-data",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\nIn this in-class data, two geospatial data sets will be used, they are:\n\ngeo_export\nnga_admbnda_adm2_osgof_20190417\n\n\nImporting water point geospatial data\nFirst, we are going to import the water point geospatial data (i.e. geo_export) by using the code chunk below.\n\nwp <- st_read(dsn = \"geodata\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\nThings to learn from the code chunk above:\n\nst_read() of sf package is used to import geo_export shapefile into R environment and save the imported geospatial data into simple feature data table.\nfilter() of dplyr package is used to extract water point records of Nigeria.\n\n\nBe warned: Avoid performing transformation if you plan to use st_intersects() of sf package in the later stage of the geoprocessing. This is because st_intersects() only works correctly if the geospatial data are in geographic coordinate system (i.e. wgs84)\n\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in geodata sub-folder.\n\nwrite_rds(wp, \"geodata/wp_nga.rds\")\n\n\n\nImporting Nigeria LGA boundary data\nNow, we are going to import the LGA boundary data into R environment by using the code chunk below.\n\nnga <- st_read(dsn = \"geodata\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)\n\nThing to learn from the code chunk above.\n\nst_read() of sf package is used to import nga_admbnda_adm2_osgof_20190417 shapefile into R environment and save the imported geospatial data into simple feature data table."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#data-wrangling",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#data-wrangling",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nRecoding NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into Unknown.\n\nwp_nga <- read_rds(\"geodata/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\n\n\nEDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data=wp_nga, \n     input = 'status_cle')"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#extracting-water-point-data",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#extracting-water-point-data",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Extracting Water Point Data",
    "text": "Extracting Water Point Data\nIn this section, we will extract the water point records by using classes in status_cle field.\n\nExtracting funtional water point\nIn the code chunk below, filter() of dplyr is used to select functional water points.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\n\n\nExtracting non-funtional water point\nIn the code chunk below, filter() of dplyr is used to select non-functional water points.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\nfreq(data=wpt_nonfunctional, \n     input = 'status_cle')\n\n\n\nExtracting water point with Unknown class\nIn the code chunk below, filter() of dplyr is used to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#performing-point-in-polygon-count",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#performing-point-in-polygon-count",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Performing Point-in-Polygon Count",
    "text": "Performing Point-in-Polygon Count\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#saving-the-analytical-data-table",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#saving-the-analytical-data-table",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Saving the Analytical Data Table",
    "text": "Saving the Analytical Data Table\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%\n  select(3:4, 9:10, 18:23)\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr package is used to derive two fields namely pct_functional and pct_non-functional.\nto keep the file size small, select() of dplyr is used to retain only field 3,4,9,10, 18,19,20,21,22,and 23.\n\nNow, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.\n\nwrite_rds(nga_wp, \"geodata/nga_wp.rds\")\n\nBefore you end this section, please remember to delete away all the raw data. Notice that the only data file left is nga_wp.rds and it’s file size is aroung 2.1MB.\n\nnga_wp <- read_rds(\"geodata/nga_wp.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#visualising-the-spatial-dsitribution-of-water-points",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#visualising-the-spatial-dsitribution-of-water-points",
    "title": "Birds of a feather flock together: Do functionally similar water points positively co-occur in Nigeria?",
    "section": "Visualising the spatial dsitribution of water points",
    "text": "Visualising the spatial dsitribution of water points\n\ntotal <- qtm(nga_wp, \"total wpt\")\nwp_functional <- qtm(nga_wp, \"wpt functional\")\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\")\nunknown <- qtm(nga_wp, \"wpt unknown\")\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)\n\n\n\n\nFirst, we will exclude LGA without water point from the analysis\n\nnga_wp <- nga_wp %>%\n  filter(`total wpt` > 0)\n\nNext,\n\nknn16_w <- st_knn(nga_wp$geometry, k = 16)\nsummary(knn16_w)\n\nNeighbour list object:\nNumber of regions: 761 \nNumber of nonzero links: 12176 \nPercentage nonzero weights: 2.102497 \nAverage number of links: 16 \nNon-symmetric neighbours list\nLink number distribution:\n\n 16 \n761 \n761 least connected regions:\nwith 16 links\n761 most connected regions:\nwith 16 links\n\n\n\nnga_nb <- nga_wp %>% \n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb),\n         .before = 1)\n\n\nnga_lisa <- nga_nb %>% \n  mutate(local_moran = local_moran(\n    `pct_non-functional`, nb, wt, nsim = 99),\n    .before = 1)\n\n\nnga_lisa_sig <- nga_lisa %>%\n  filter(local_moran$p_ii <= 0.05)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "",
    "text": "This in-class exercise note aims to share with ways to handle aspatial and geospatial data that might be useful when you work on Take-home Exercise 2. By the end of this in-class exercise, you will be able to:\n\nimport geospatial data in wkt format into R,\nconvert the tibble data frame with wkt field into sf data frame, and\nperforming point-in-polygon overlay."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#data-import",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#data-import",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "Data Import",
    "text": "Data Import\nIn this in-class exercise, two data sets will be used. They are:\n\nImporting water point data\nFirst, we are going to import the water point data into R environment.\n\nwp_nga <- read_csv(\"aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\nThing to learn from the code chunk above:\n\nThe original file name is called Water_Point_Data_Exchange_-_PlusWPdx.csv, it has been rename to WPdx.csv for easy encoding.\nInstead of using read.csv() of Base R to import the csv file into R, read_csv() is readr package is used. This is because during the initial data exploration, we notice that there is at least one field name with space between the field name (ie. New Georeferenced Column)\nThe data file contains water point data of many countries. In this study, we are interested on water point in Nigeria on. Hence, filter() of dplyr is used to extract out records belong to Nigeria only.\n\n\nConvert wkt data\nAfter the data are imported into R environment, it is a good practice to review both the data structure and the data table if it is in tibble data frame format in R Studio.\nNotice that the newly imported tibble data frame (i.e. wp_nga) contains a field called New Georeferenced Column which represent spatial data in a textual format. In fact, this kind of text file is popularly known as Well Known Text in short wkt.\n\nTwo steps will be used to convert an asptial data file in wkt format into a sf data frame by using sf.\nFirst, st_as_sfc() of sf package is used to derive a new field called Geometry as shown in the code chunk below.\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\n\nIf you open wp_nga data frame and scroll to the last field now, you will see a new field called Geometry has been added as shown below.\n\nNext, st_sf() will be used to convert the tibble data frame into sf data frame.\n\nwp_sf <- st_sf(wp_nga, crs=4326) \n\nWhen the process completed, a new sf data frame called wp_sf will be created.\n\n\n\n\nImporting Nigeria LGA level boundary data\nFor the purpose of this exercise, shapefile downloaded from geoBoundaries portal will be used.\n\nnga <- st_read(dsn = \"geospatial\",\n               layer = \"geoBoundaries-NGA-ADM2\",\n               crs = 4326) %>%\n  select(shapeName)\n\n\nNote: One of your classmate had done an excellance job in cleaning the LGA data before subsequent processing and analysis. You are encouraged to refer to his Take-home Exercise 1 page especially the sub-section on Data wrangling.\n\n\nGentle reminder: Please remember to acknowledge your classmate work if you referred to his procedures and code chunks."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#read-csv-files",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#read-csv-files",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "read CSV files",
    "text": "read CSV files\nFirst, we are going to import the water point data into R environment.\n\nwp_nga <- read_csv(\"aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\nThing to learn from the code chunk above:\n\nThe original file name is called Water_Point_Data_Exchange_-_PlusWPdx.csv, it has been rename to WPdx.csv for easy encoding.\nInstead of using read.csv() of Base R to import the csv file into R, read_csv() is readr package is used. This is because during the initial data exploration, we notice that there is at least one field name with space between the field name (ie. New Georeferenced Column)\nThe data file contains water point data of many countries. In this study, we are interested on water point in Nigeria on. Hence, filter() of dplyr is used to extract out records belong to Nigeria only.\n\nConvert the column “geometry” to sfc\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#getting-started",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#getting-started",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "Getting Started",
    "text": "Getting Started\nAs usual, to get started, we will load the necessary R packages. For the purpose of this in-class exercise, three R packages will be used, they are:\n\nsf for importing and processing geospatial data,\ntidyverse for importing and processing non-spatial data. In this exercise, readr package will be used for importing wkt data and dplyr package will be used to wrangling the data.\n\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#point-in-polygon-overlay",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#point-in-polygon-overlay",
    "title": "Regionalisation with Spatially Constrained Cluster Analysis",
    "section": "Point in Polygon Overlay",
    "text": "Point in Polygon Overlay\nAlthough wp_sf sf data frame consists of a field called #clean_adm2 which by right should provides the LGA name of the water point located. However, it is always a good practice to be more caution when dealing with data accuracy.\nIn this section, we are going to use a geoprocessing function (or commonly know as GIS analysis) called point-in-polygon overlay to transfer the attribute information in nga sf data frame into wp_sf data frame.\n\nwp_sf <- st_join(wp_sf, nga)\n\nNotice that a new field called shapeName has been added into wp_sf sf data frame. as shown below.\n\nNow you will be able to apply appropriate data wrangling functions of dplyr to extract the necessary clustering variables by using this data frame.\n\nBe warned: Please do remember to delete the large data files in the project repository before push the changes onto github."
  }
]